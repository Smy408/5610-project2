{"ast":null,"code":"var _jsxFileName = \"/Users/yiyuzhang/NEU/cs5610/Mingyi-Shi-Yiyu-Zhang-project2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport Keyboard from \"./components/Keyboard\";\nimport { boardDefaults, generateWordSet } from \"./Words\";\nimport React, { useState, createContext, useEffect } from \"react\";\nimport { BrowserRouter as Router, useLocation } from \"react-router-dom\";\nimport GameOver from \"./components/GameOver\";\nimport Popup from \"./components/popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\nfunction App(props) {\n  _s();\n\n  const location = useLocation();\n  const currentPathName = location.pathname;\n  let currentDifficulty = 0;\n\n  if (currentPathName === \"/game/medium\") {\n    currentDifficulty = 1;\n  } else if (currentPathName === \"/game/hard\") {\n    currentDifficulty = 2;\n  }\n\n  const [board, setBoard] = useState(boardDefaults[0]);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letter: 0\n  });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  useEffect(() => {\n    generateWordSet(currentDifficulty).then(words => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n\n  const onEnter = () => {\n    if (currAttempt.letter !== currentDifficulty + 5) return;\n    let currWord = \"\";\n\n    for (let i = 0; i < currentDifficulty + 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letter: 0\n      });\n    } else {\n      //alert(\"Word not found\");\n      window.prompt(\"wrong\");\n    }\n\n    if (currWord.toLowerCase() === correctWord) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: true\n      });\n      return;\n    }\n\n    if (currAttempt.attempt === 6 - currentDifficulty) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n      return;\n    }\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letter: currAttempt.letter - 1\n    });\n  };\n\n  const onSelectLetter = key => {\n    if (currAttempt.letter > 4 + currentDifficulty) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        correctWord,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        gameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {\n          currentDifficulty: currentDifficulty\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Q1GcIvrjYhtFvFdOfMEfSzxKxuU=\", false, function () {\n  return [useLocation];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/yiyuzhang/NEU/cs5610/Mingyi-Shi-Yiyu-Zhang-project2/src/App.js"],"names":["Board","Keyboard","boardDefaults","generateWordSet","React","useState","createContext","useEffect","BrowserRouter","Router","useLocation","GameOver","Popup","AppContext","App","props","location","currentPathName","pathname","currentDifficulty","board","setBoard","currAttempt","setCurrAttempt","attempt","letter","wordSet","setWordSet","Set","correctWord","setCorrectWord","gameOver","setGameOver","guessedWord","then","words","todaysWord","onEnter","currWord","i","has","toLowerCase","window","prompt","onDelete","newBoard","onSelectLetter","key"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Board from \"./components/Board\";\nimport Keyboard from \"./components/Keyboard\";\nimport { boardDefaults, generateWordSet } from \"./Words\";\nimport React, { useState, createContext, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  useLocation\n} from \"react-router-dom\";\nimport GameOver from \"./components/GameOver\";\nimport Popup from \"./components/popup\"; \n\nexport const AppContext = createContext(); \n\nfunction App(props) {\n  const location = useLocation();\n  const currentPathName = location.pathname;\n  let currentDifficulty = 0;\n  if(currentPathName === \"/game/medium\") {\n    currentDifficulty = 1;\n  } else if (currentPathName === \"/game/hard\"){\n    currentDifficulty = 2;\n  } \n  const [board, setBoard] = useState(boardDefaults[0]);\n  const [currAttempt, setCurrAttempt] = useState({ attempt: 0, letter: 0 });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [correctWord, setCorrectWord] = useState(\"\");\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false,\n  });\n\n  useEffect(() => {\n    generateWordSet(currentDifficulty).then((words) => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n\n  const onEnter = () => {\n\n    if (currAttempt.letter !== currentDifficulty + 5) return;\n\n    let currWord = \"\";\n    for (let i = 0; i < currentDifficulty + 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letter: 0 });\n    } else {\n      //alert(\"Word not found\");\n      window.prompt(\"wrong\"); \n    }\n    if (currWord.toLowerCase() === correctWord) {\n      setGameOver({ gameOver: true, guessedWord: true });\n      return;\n    }\n    if (currAttempt.attempt === 6 - currentDifficulty) {\n      setGameOver({ gameOver: true, guessedWord: false });\n      return;\n    }\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, letter: currAttempt.letter - 1 });\n  };\n\n  const onSelectLetter = (key) => {\n    if (currAttempt.letter > 4 + currentDifficulty) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider\n        value={{\n          board,\n          setBoard,\n          currAttempt,\n          setCurrAttempt,\n          correctWord,\n          onSelectLetter,\n          onDelete,\n          onEnter,\n          gameOver,\n        }}\n      >\n        <div className=\"game\">\n          <Board currentDifficulty={currentDifficulty}/>\n          {gameOver.gameOver ? <GameOver /> : <Keyboard />}\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}