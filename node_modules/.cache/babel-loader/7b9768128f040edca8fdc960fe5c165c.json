{"ast":null,"code":"import wordBankEasy from \"./wordle-easybank.txt\";\nimport wordBankMedium from \"./wordle-mediumbank.txt\";\nimport wordBankHard from \"./wordle-hardbank.txt\";\nexport const boardDefaultsnexport const generateWordSet = async currentDifficulty => {\n  let wordSet;\n  let todaysWord;\n\n  if (currentDifficulty === 1) {\n    await fetch(wordBankMedium).then(response => response.text()).then(result => {\n      const wordArr = result.split(\"\\n\");\n      todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n      wordSet = new Set(wordArr);\n    });\n  } else if (currentDifficulty === 2) {\n    await fetch(wordBankHard).then(response => response.text()).then(result => {\n      const wordArr = result.split(\"\\n\");\n      todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n      wordSet = new Set(wordArr);\n    });\n  } else {\n    await fetch(wordBankEasy).then(response => response.text()).then(result => {\n      const wordArr = result.split(\"\\n\");\n      todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n      wordSet = new Set(wordArr);\n    });\n  }\n\n  return {\n    wordSet,\n    todaysWord\n  };\n};","map":{"version":3,"sources":["/Users/yiyuzhang/NEU/cs5610/Mingyi-Shi-Yiyu-Zhang-project2/src/Words.js"],"names":["wordBankEasy","wordBankMedium","wordBankHard","boardDefaults","generateWordSet","currentDifficulty","wordSet","todaysWord","fetch","then","response","text","result","wordArr","split","Math","floor","random","length","Set"],"mappings":"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","sourcesContent":["import wordBankEasy from \"./wordle-easybank.txt\";\nimport wordBankMedium from \"./wordle-mediumbank.txt\";\nimport wordBankHard from \"./wordle-hardbank.txt\";\n\nexport const boardDefaults = [[\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\"],\n], \n[\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\"],\n], \n[\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n]];\n\nexport const generateWordSet = async (currentDifficulty) => {\n  let wordSet;\n  let todaysWord;\n  if(currentDifficulty === 1) {\n    await fetch(wordBankMedium)\n      .then((response) => response.text())\n      .then((result) => {\n        const wordArr = result.split(\"\\n\");\n        todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n        wordSet = new Set(wordArr);\n      });\n  } else if (currentDifficulty === 2) {\n    await fetch(wordBankHard)\n      .then((response) => response.text())\n      .then((result) => {\n        const wordArr = result.split(\"\\n\");\n        todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n        wordSet = new Set(wordArr);\n      });\n  } else {\n    await fetch(wordBankEasy)\n    .then((response) => response.text())\n    .then((result) => {\n      const wordArr = result.split(\"\\n\");\n      todaysWord = wordArr[Math.floor(Math.random() * wordArr.length)];\n      wordSet = new Set(wordArr);\n    });\n  }\n  return { wordSet, todaysWord };\n};\n"]},"metadata":{},"sourceType":"module"}